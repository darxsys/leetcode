#include <cstdio>
#include <vector>
using namespace std;

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        vector<int> *p1 = &nums1;
        vector<int> *p2 = &nums2;

        if (m > n)
        {
            vector<int> *temp = p1;
            p1 = p2;
            p2 = temp;

            int a = m;
            m = n;
            n = a;
        }

        vector<int> &A = *p1;
        vector<int> &B = *p2;

        int sum_all = m + n;

        int iMin = 0;
        int iMax = m;
        int half = (m + n + sum_all % 2) / 2;
        int i, j;

        while (iMin <= iMax)
        {
            i = (iMax + iMin) / 2;
            j = half - i;

            if (i < iMax && A[i] < B[j-1])
            {
                iMin = i+1;
            }
            else if (i > iMin && B[j] < A[i-1])
            {
                iMax = i-1;
            }
            else
            {
                int leftMax;
                if (i == 0) leftMax = B[j-1];
                else if (j == 0) leftMax = A[i-1];
                else leftMax = max(A[i-1], B[j-1]);

                if (sum_all % 2) return leftMax;

                int rightMin;
                if (i == m) rightMin = B[j];
                else if (j == n) rightMin = A[i];
                else rightMin = min(A[i], B[j]);

                return (leftMax + rightMin) / 2.;
            }
        }

        return 0;
    }
};

int main(void)
{
    Solution s;
    int num_tests;
    scanf("%d", &num_tests);

    while (num_tests)
    {
        int m, n;
        scanf("%d %d", &m, &n);

        vector<int> v1;
        vector<int> v2;

        for (int i = 0; i < m; ++i)
        {
            int a;
            scanf("%d", &a);
            v1.push_back(a);
        }

        for (int i = 0; i < n; ++i)
        {
            int a;
            scanf("%d", &a);
            v2.push_back(a);
        }

        double solution;
        scanf("%lf", &solution);

        printf("expected %lf, actual %lf\n", solution, s.findMedianSortedArrays(v1, v2));

        num_tests--;
    }
    
    return 0;
}
